# Generated by Django 3.2.13 on 2022-05-19 13:38

import db.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from tbot.models import ExchangeConnection


def forwards_func(apps, schema_editor):
    pass


def reverse_func(apps, schema_editor):
    connection = django.db.connections[ExchangeConnection.objects.db]
    db_name = connection.settings_dict['NAME']
    table_name = ExchangeConnection.objects.model._meta.db_table
    cursor = connection.cursor()
    cursor.execute('SELECT CONSTRAINT_NAME \
        FROM information_schema.key_column_usage \
        WHERE CONSTRAINT_SCHEMA = %(constraint_schema)s \
        AND TABLE_NAME= %(table_name)s \
        AND REFERENCED_TABLE_NAME IS NOT NULL', {'constraint_schema': db_name, 'table_name': table_name})
    fk_name = cursor.fetchone()[0]
    cursor.execute('ALTER TABLE ' + table_name + ' DROP FOREIGN KEY ' + fk_name)


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Bot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance_allowance_type',
                 db.fields.EnumField(choices=[('PERCENT', 'Percent'), ('ABSOLUTE', 'Absolute')], default='PERCENT')),
                ('balance_allowance', models.FloatField(null=True, blank=True, default=None)),
                ('risk_target_type',
                 db.fields.EnumField(choices=[('PERCENT', 'Percent'), ('ABSOLUTE', 'Absolute')], default='PERCENT')),
                ('risk_target', models.FloatField(null=True, blank=True, default=None)),
                ('direction',
                 db.fields.EnumField(choices=[('UP', 'Up'), ('DOWN', 'Down'), ('UPDOWN', 'Updown')], default='UPDOWN')),
                ('price_limit', models.FloatField(null=True, blank=True, default=None)),
                ('price_limit_type',
                 db.fields.EnumField(choices=[('PERCENT', 'Percent'), ('ABSOLUTE', 'Absolute')], default='PERCENT')),
                ('lot', models.FloatField(null=True, blank=True, default=None)),
                ('lot_multiplier', models.FloatField(default=1)),
                ('step', models.FloatField(null=True, blank=True, default=None)),
                ('step_type',
                 db.fields.EnumField(choices=[('PERCENT', 'Percent'), ('ABSOLUTE', 'Absolute')], default='PERCENT')),
                ('step_delta', models.FloatField(null=True, blank=True, default=None)),
                ('profit_target', models.FloatField(null=True, blank=True, default=None)),
                ('saver', models.FloatField(null=True, blank=True, default=None)),
                ('algorithm', db.fields.EnumField(choices=[('DCA1', 'Dca1'), ('DCA2', 'Dca2')], default='DCA1')),
            ],
        ),
        migrations.CreateModel(
            name='Symbol',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exchange', db.fields.EnumField(choices=[('BINANCE', 'Binance'), ('FTX', 'Ftx')], default='BINANCE')),
                ('base_asset', models.CharField(max_length=16)),
                ('quote_asset', models.CharField(max_length=16)),
                ('symbol', models.CharField(max_length=32)),
                ('min_notional', models.FloatField(null=True, blank=True, default=None)),
                ('min_price', models.FloatField(null=True, blank=True, default=None)),
                ('max_price', models.FloatField(null=True, blank=True, default=None)),
                ('tick_size', models.FloatField(null=True, blank=True, default=None)),
                ('step_size', models.FloatField(null=True, blank=True, default=None)),
                ('min_qty', models.FloatField(null=True, blank=True, default=None)),
                ('price', models.FloatField(null=True, blank=True, default=None)),
                ('enabled', models.BooleanField(blank=True, default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tbot.bot')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_step', models.FloatField(default=0.01)),
                (
                    'user',
                    models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tbot.round')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', db.fields.EnumField(
                    choices=[('NEW', 'New'), ('OPEN', 'Open'), ('DONE', 'Done'), ('CANCELED', 'Canceled')],
                    default='NEW')),
                ('type', db.fields.EnumField(
                    choices=[('LIMIT', 'Limit'), ('MARKET', 'Market'), ('STOP_LOSS', 'Stop Loss'),
                             ('STOP_LOSS_LIMIT', 'Stop Loss Limit'), ('TAKE_PROFIT', 'Take Profit'),
                             ('TAKE_PROFIT_LIMIT', 'Take Profit Limit'), ('LIMIT_MAKER', 'Limit Maker')],
                    default='MARKET')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tbot.position')),
                ('limitClientOrderId', models.TextField(default='')),
                ('newClientOrderId', models.TextField(default='')),
                ('price', models.FloatField(blank=True, default=None, null=True)),
                ('quantity', models.FloatField(blank=True, default=None, null=True)),
                ('stopPrice', models.FloatField(blank=True, default=None, null=True)),
                ('side', db.fields.EnumField(choices=[('SELL', 'Sell'), ('BUY', 'Buy')], default='SELL')),
                ('stopClientOrderId', models.TextField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='ExchangeConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exchange', db.fields.EnumField(choices=[('BINANCE', 'Binance'), ('FTX', 'Ftx')], default='BINANCE')),
                ('API_key', models.TextField()),
                ('API_secret', models.TextField()),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='bot',
            name='exchange_connection',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tbot.exchangeconnection'),
        ),
        migrations.AddField(
            model_name='bot',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='bot',
            name='symbol',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tbot.symbol'),
        ),
        migrations.AddConstraint(
            model_name='exchangeconnection',
            constraint=models.UniqueConstraint(fields=('owner', 'exchange'), name='owner_and_exchange'),
        ),
        migrations.AddConstraint(
            model_name='symbol',
            constraint=models.UniqueConstraint(
                fields=('exchange', 'base_asset', 'quote_asset'),
                name='exchange_and_base_and_quote_assets'
            ),
        ),
        migrations.AddConstraint(
            model_name='symbol',
            constraint=models.UniqueConstraint(
                fields=['exchange', 'symbol'],
                name='exchange_and_symbol'
            ),
        ),
        migrations.RunPython(forwards_func, reverse_func),
    ]
